stages:
# - build
# - test
- lint
- publish
# - deploy

variables:
  TAG_LATEST: $REGISTRY_IMAGE/$REF_NAME:latest
  TAG_COMMIT: $REGISTRY_IMAGE/$REF_NAME:$CI_JOB_ID

# bot_tests:
#   stage: test
#   image: python
#   script:
#     - pip install -r ./tests/requirements.txt 
#     - pytest ./

bot_lint:
  image: node:13.12.0-alpine
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - bot/*
  before_script:
    - cd bot
    - npm install
  script:
    - npx eslint .

web_lint:
  image: node:18.18-alpine
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - web/*
  before_script:
    - cd web
    - npm install
  script:
    - npx eslint .

docker_publish:
  image: docker:latest
  stage: publish
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - bot/*
  services:
    - docker:dind
  before_script:
    - cd bot
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_ACCESS_TOKEN
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

# bot_deploy:
#   image: alpine:latest
#   stage: deploy
#   script:
#     - chmod og= $ID_RSA
#     - apk update && apk add openssh-client
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_LOGIN -p $DOCKER_HUB_ACCESS_TOKEN"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker rm -f bot"
#     - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d --network="host" --name="bot" $TAG_COMMIT"
